// auto-generated by genOpcodes.ts

/**
 * Instruction argument types.
 */
export const enum ArgType {
    /** Unsigned 8-bit value */
    UInt8,
    /** Unsigned 8-bit register index */
    Reg8,
    /** Signed 8-bit relative address */
    Addr8,
    /** Unsigned 16-bit value */
    UInt16,
    /** Unsigned 32-bit value */
    UInt32,
    /** Unsigned 32-bit register index */
    Reg32,
    /** Signed 32-bit immediate */
    Imm32,
    /** Signed 32-bit relative address */
    Addr32,
    /** Double-precision floating point number */
    Double,
}

/**
 * Numeric Hermes instruction opcodes.
 */
export enum Opcode { // {{{
    Unreachable,
    NewObjectWithBuffer,
    NewObjectWithBufferLong,
    NewObject,
    NewObjectWithParent,
    NewArrayWithBuffer,
    NewArrayWithBufferLong,
    NewArray,
    Mov,
    MovLong,
    Negate,
    Not,
    BitNot,
    TypeOf,
    Eq,
    StrictEq,
    Neq,
    StrictNeq,
    Less,
    LessEq,
    Greater,
    GreaterEq,
    Add,
    AddN,
    Mul,
    MulN,
    Div,
    DivN,
    Mod,
    Sub,
    SubN,
    LShift,
    RShift,
    URshift,
    BitAnd,
    BitXor,
    BitOr,
    Inc,
    Dec,
    InstanceOf,
    IsIn,
    GetEnvironment,
    StoreToEnvironment,
    StoreToEnvironmentL,
    StoreNPToEnvironment,
    StoreNPToEnvironmentL,
    LoadFromEnvironment,
    LoadFromEnvironmentL,
    GetGlobalObject,
    GetNewTarget,
    CreateEnvironment,
    CreateInnerEnvironment,
    DeclareGlobalVar,
    ThrowIfHasRestrictedGlobalProperty,
    GetByIdShort,
    GetById,
    GetByIdLong,
    TryGetById,
    TryGetByIdLong,
    PutById,
    PutByIdLong,
    TryPutById,
    TryPutByIdLong,
    PutNewOwnByIdShort,
    PutNewOwnById,
    PutNewOwnByIdLong,
    PutNewOwnNEById,
    PutNewOwnNEByIdLong,
    PutOwnByIndex,
    PutOwnByIndexL,
    PutOwnByVal,
    DelById,
    DelByIdLong,
    GetByVal,
    PutByVal,
    DelByVal,
    PutOwnGetterSetterByVal,
    GetPNameList,
    GetNextPName,
    Call,
    Construct,
    Call1,
    CallDirect,
    Call2,
    Call3,
    Call4,
    CallLong,
    ConstructLong,
    CallDirectLongIndex,
    CallBuiltin,
    CallBuiltinLong,
    GetBuiltinClosure,
    Ret,
    Catch,
    DirectEval,
    Throw,
    ThrowIfEmpty,
    Debugger,
    AsyncBreakCheck,
    ProfilePoint,
    CreateClosure,
    CreateClosureLongIndex,
    CreateGeneratorClosure,
    CreateGeneratorClosureLongIndex,
    CreateAsyncClosure,
    CreateAsyncClosureLongIndex,
    CreateThis,
    SelectObject,
    LoadParam,
    LoadParamLong,
    LoadConstUInt8,
    LoadConstInt,
    LoadConstDouble,
    LoadConstBigInt,
    LoadConstBigIntLongIndex,
    LoadConstString,
    LoadConstStringLongIndex,
    LoadConstEmpty,
    LoadConstUndefined,
    LoadConstNull,
    LoadConstTrue,
    LoadConstFalse,
    LoadConstZero,
    CoerceThisNS,
    LoadThisNS,
    ToNumber,
    ToNumeric,
    ToInt32,
    AddEmptyString,
    GetArgumentsPropByVal,
    GetArgumentsLength,
    ReifyArguments,
    CreateRegExp,
    SwitchImm,
    StartGenerator,
    ResumeGenerator,
    CompleteGenerator,
    CreateGenerator,
    CreateGeneratorLongIndex,
    IteratorBegin,
    IteratorNext,
    IteratorClose,
    Jmp,
    JmpLong,
    JmpTrue,
    JmpTrueLong,
    JmpFalse,
    JmpFalseLong,
    JmpUndefined,
    JmpUndefinedLong,
    SaveGenerator,
    SaveGeneratorLong,
    JLess,
    JLessLong,
    JNotLess,
    JNotLessLong,
    JLessN,
    JLessNLong,
    JNotLessN,
    JNotLessNLong,
    JLessEqual,
    JLessEqualLong,
    JNotLessEqual,
    JNotLessEqualLong,
    JLessEqualN,
    JLessEqualNLong,
    JNotLessEqualN,
    JNotLessEqualNLong,
    JGreater,
    JGreaterLong,
    JNotGreater,
    JNotGreaterLong,
    JGreaterN,
    JGreaterNLong,
    JNotGreaterN,
    JNotGreaterNLong,
    JGreaterEqual,
    JGreaterEqualLong,
    JNotGreaterEqual,
    JNotGreaterEqualLong,
    JGreaterEqualN,
    JGreaterEqualNLong,
    JNotGreaterEqualN,
    JNotGreaterEqualNLong,
    JEqual,
    JEqualLong,
    JNotEqual,
    JNotEqualLong,
    JStrictEqual,
    JStrictEqualLong,
    JStrictNotEqual,
    JStrictNotEqualLong,
    Add32,
    Sub32,
    Mul32,
    Divi32,
    Divu32,
    Loadi8,
    Loadu8,
    Loadi16,
    Loadu16,
    Loadi32,
    Loadu32,
    Store8,
    Store16,
    Store32,
} // }}}

/**
 * Argument type corresponding to {@link Opcode}.
 */
export const opcodeTypes = { // {{{
    [Opcode.Unreachable]: [],
    [Opcode.NewObjectWithBuffer]: [ArgType.Reg8, ArgType.UInt16, ArgType.UInt16, ArgType.UInt16, ArgType.UInt16],
    [Opcode.NewObjectWithBufferLong]: [ArgType.Reg8, ArgType.UInt16, ArgType.UInt16, ArgType.UInt32, ArgType.UInt32],
    [Opcode.NewObject]: [ArgType.Reg8],
    [Opcode.NewObjectWithParent]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.NewArrayWithBuffer]: [ArgType.Reg8, ArgType.UInt16, ArgType.UInt16, ArgType.UInt16],
    [Opcode.NewArrayWithBufferLong]: [ArgType.Reg8, ArgType.UInt16, ArgType.UInt16, ArgType.UInt32],
    [Opcode.NewArray]: [ArgType.Reg8, ArgType.UInt16],
    [Opcode.Mov]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.MovLong]: [ArgType.Reg32, ArgType.Reg32],
    [Opcode.Negate]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.Not]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.BitNot]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.TypeOf]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.Eq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.StrictEq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Neq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.StrictNeq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Less]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.LessEq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Greater]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.GreaterEq]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Add]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.AddN]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Mul]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.MulN]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Div]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.DivN]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Mod]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Sub]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.SubN]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.LShift]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.RShift]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.URshift]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.BitAnd]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.BitXor]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.BitOr]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Inc]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.Dec]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.InstanceOf]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.IsIn]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.GetEnvironment]: [ArgType.Reg8, ArgType.UInt8],
    [Opcode.StoreToEnvironment]: [ArgType.Reg8, ArgType.UInt8, ArgType.Reg8],
    [Opcode.StoreToEnvironmentL]: [ArgType.Reg8, ArgType.UInt16, ArgType.Reg8],
    [Opcode.StoreNPToEnvironment]: [ArgType.Reg8, ArgType.UInt8, ArgType.Reg8],
    [Opcode.StoreNPToEnvironmentL]: [ArgType.Reg8, ArgType.UInt16, ArgType.Reg8],
    [Opcode.LoadFromEnvironment]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.LoadFromEnvironmentL]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.GetGlobalObject]: [ArgType.Reg8],
    [Opcode.GetNewTarget]: [ArgType.Reg8],
    [Opcode.CreateEnvironment]: [ArgType.Reg8],
    [Opcode.CreateInnerEnvironment]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.DeclareGlobalVar]: [ArgType.UInt32],
    [Opcode.ThrowIfHasRestrictedGlobalProperty]: [ArgType.UInt32],
    [Opcode.GetByIdShort]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt8],
    [Opcode.GetById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt16],
    [Opcode.GetByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.TryGetById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt16],
    [Opcode.TryGetByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.PutById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt16],
    [Opcode.PutByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.TryPutById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt16],
    [Opcode.TryPutByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.PutNewOwnByIdShort]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.PutNewOwnById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.PutNewOwnByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.PutNewOwnNEById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.PutNewOwnNEByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.PutOwnByIndex]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.PutOwnByIndexL]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.PutOwnByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.DelById]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.DelByIdLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.GetByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.PutByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.DelByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.PutOwnGetterSetterByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.GetPNameList]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.GetNextPName]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Call]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.Construct]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.Call1]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.CallDirect]: [ArgType.Reg8, ArgType.UInt8, ArgType.UInt16],
    [Opcode.Call2]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Call3]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Call4]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.CallLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.ConstructLong]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.CallDirectLongIndex]: [ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.CallBuiltin]: [ArgType.Reg8, ArgType.UInt8, ArgType.UInt8],
    [Opcode.CallBuiltinLong]: [ArgType.Reg8, ArgType.UInt8, ArgType.UInt32],
    [Opcode.GetBuiltinClosure]: [ArgType.Reg8, ArgType.UInt8],
    [Opcode.Ret]: [ArgType.Reg8],
    [Opcode.Catch]: [ArgType.Reg8],
    [Opcode.DirectEval]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt8],
    [Opcode.Throw]: [ArgType.Reg8],
    [Opcode.ThrowIfEmpty]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.Debugger]: [],
    [Opcode.AsyncBreakCheck]: [],
    [Opcode.ProfilePoint]: [ArgType.UInt16],
    [Opcode.CreateClosure]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.CreateClosureLongIndex]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.CreateGeneratorClosure]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.CreateGeneratorClosureLongIndex]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.CreateAsyncClosure]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.CreateAsyncClosureLongIndex]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.CreateThis]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.SelectObject]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.LoadParam]: [ArgType.Reg8, ArgType.UInt8],
    [Opcode.LoadParamLong]: [ArgType.Reg8, ArgType.UInt32],
    [Opcode.LoadConstUInt8]: [ArgType.Reg8, ArgType.UInt8],
    [Opcode.LoadConstInt]: [ArgType.Reg8, ArgType.Imm32],
    [Opcode.LoadConstDouble]: [ArgType.Reg8, ArgType.Double],
    [Opcode.LoadConstBigInt]: [ArgType.Reg8, ArgType.UInt16],
    [Opcode.LoadConstBigIntLongIndex]: [ArgType.Reg8, ArgType.UInt32],
    [Opcode.LoadConstString]: [ArgType.Reg8, ArgType.UInt16],
    [Opcode.LoadConstStringLongIndex]: [ArgType.Reg8, ArgType.UInt32],
    [Opcode.LoadConstEmpty]: [ArgType.Reg8],
    [Opcode.LoadConstUndefined]: [ArgType.Reg8],
    [Opcode.LoadConstNull]: [ArgType.Reg8],
    [Opcode.LoadConstTrue]: [ArgType.Reg8],
    [Opcode.LoadConstFalse]: [ArgType.Reg8],
    [Opcode.LoadConstZero]: [ArgType.Reg8],
    [Opcode.CoerceThisNS]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.LoadThisNS]: [ArgType.Reg8],
    [Opcode.ToNumber]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.ToNumeric]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.ToInt32]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.AddEmptyString]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.GetArgumentsPropByVal]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.GetArgumentsLength]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.ReifyArguments]: [ArgType.Reg8],
    [Opcode.CreateRegExp]: [ArgType.Reg8, ArgType.UInt32, ArgType.UInt32, ArgType.UInt32],
    [Opcode.SwitchImm]: [ArgType.Reg8, ArgType.UInt32, ArgType.Addr32, ArgType.UInt32, ArgType.UInt32],
    [Opcode.StartGenerator]: [],
    [Opcode.ResumeGenerator]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.CompleteGenerator]: [],
    [Opcode.CreateGenerator]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt16],
    [Opcode.CreateGeneratorLongIndex]: [ArgType.Reg8, ArgType.Reg8, ArgType.UInt32],
    [Opcode.IteratorBegin]: [ArgType.Reg8, ArgType.Reg8],
    [Opcode.IteratorNext]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.IteratorClose]: [ArgType.Reg8, ArgType.UInt8],
    [Opcode.Jmp]: [ArgType.Addr8],
    [Opcode.JmpLong]: [ArgType.Addr32],
    [Opcode.JmpTrue]: [ArgType.Addr8, ArgType.Reg8],
    [Opcode.JmpTrueLong]: [ArgType.Addr32, ArgType.Reg8],
    [Opcode.JmpFalse]: [ArgType.Addr8, ArgType.Reg8],
    [Opcode.JmpFalseLong]: [ArgType.Addr32, ArgType.Reg8],
    [Opcode.JmpUndefined]: [ArgType.Addr8, ArgType.Reg8],
    [Opcode.JmpUndefinedLong]: [ArgType.Addr32, ArgType.Reg8],
    [Opcode.SaveGenerator]: [ArgType.Addr8],
    [Opcode.SaveGeneratorLong]: [ArgType.Addr32],
    [Opcode.JLess]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLess]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessEqualN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JLessEqualNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessEqualN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotLessEqualNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreater]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreater]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterEqualN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JGreaterEqualNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterEqualN]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotGreaterEqualNLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JNotEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JStrictEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JStrictEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JStrictNotEqual]: [ArgType.Addr8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.JStrictNotEqualLong]: [ArgType.Addr32, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Add32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Sub32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Mul32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Divi32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Divu32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadi8]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadu8]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadi16]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadu16]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadi32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Loadu32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Store8]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Store16]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
    [Opcode.Store32]: [ArgType.Reg8, ArgType.Reg8, ArgType.Reg8],
} as const; // }}}

/**
 * Opcodes which have operands referring to the bigint table.
 */
const BIGINT_OPERANDS = { // {{{
    [Opcode.LoadConstBigInt]: [1],
    [Opcode.LoadConstBigIntLongIndex]: [1],
} as const; // }}}
export type BigIntOperandMap = typeof BIGINT_OPERANDS;
export const bigintOperands: Readonly<Partial<Record<Opcode, readonly number[]>>> = BIGINT_OPERANDS;

/**
 * Opcodes which have operands referring to the function table.
 */
const FUNCTION_OPERANDS = { // {{{
    [Opcode.CallDirect]: [2],
    [Opcode.CreateClosure]: [2],
    [Opcode.CreateClosureLongIndex]: [2],
    [Opcode.CreateGeneratorClosure]: [2],
    [Opcode.CreateGeneratorClosureLongIndex]: [2],
    [Opcode.CreateAsyncClosure]: [2],
    [Opcode.CreateAsyncClosureLongIndex]: [2],
    [Opcode.CreateGenerator]: [2],
    [Opcode.CreateGeneratorLongIndex]: [2],
} as const; // }}}
export type FunctionOperandMap =   typeof FUNCTION_OPERANDS;
export const functionOperands: Readonly<Partial<Record<Opcode, readonly number[]>>> = FUNCTION_OPERANDS;

/**
 * Opcodes which have operands referring to the string table.
 */
const STRING_OPERANDS = { // {{{
    [Opcode.DeclareGlobalVar]: [0],
    [Opcode.ThrowIfHasRestrictedGlobalProperty]: [0],
    [Opcode.GetByIdShort]: [3],
    [Opcode.GetById]: [3],
    [Opcode.GetByIdLong]: [3],
    [Opcode.TryGetById]: [3],
    [Opcode.TryGetByIdLong]: [3],
    [Opcode.PutById]: [3],
    [Opcode.PutByIdLong]: [3],
    [Opcode.TryPutById]: [3],
    [Opcode.TryPutByIdLong]: [3],
    [Opcode.PutNewOwnByIdShort]: [2],
    [Opcode.PutNewOwnById]: [2],
    [Opcode.PutNewOwnByIdLong]: [2],
    [Opcode.PutNewOwnNEById]: [2],
    [Opcode.PutNewOwnNEByIdLong]: [2],
    [Opcode.DelById]: [2],
    [Opcode.DelByIdLong]: [2],
    [Opcode.LoadConstString]: [1],
    [Opcode.LoadConstStringLongIndex]: [1],
    [Opcode.CreateRegExp]: [1, 2],
} as const; // }}}
export type StringOperandMap = typeof STRING_OPERANDS;
export const stringOperands: Readonly<Partial<Record<Opcode, readonly number[]>>> = STRING_OPERANDS;

export enum Builtin { // {{{
    "Array.isArray",
    "Date.UTC",
    "Date.parse",
    "JSON.parse",
    "JSON.stringify",
    "Math.abs",
    "Math.acos",
    "Math.asin",
    "Math.atan",
    "Math.atan2",
    "Math.ceil",
    "Math.cos",
    "Math.exp",
    "Math.floor",
    "Math.hypot",
    "Math.imul",
    "Math.log",
    "Math.max",
    "Math.min",
    "Math.pow",
    "Math.round",
    "Math.sin",
    "Math.sqrt",
    "Math.tan",
    "Math.trunc",
    "Object.create",
    "Object.defineProperties",
    "Object.defineProperty",
    "Object.freeze",
    "Object.getOwnPropertyDescriptor",
    "Object.getOwnPropertyNames",
    "Object.getPrototypeOf",
    "Object.isExtensible",
    "Object.isFrozen",
    "Object.keys",
    "Object.seal",
    "String.fromCharCode",
    "silentSetPrototypeOf",
    "requireFast",
    "getTemplateObject",
    "ensureObject",
    "getMethod",
    "throwTypeError",
    "generatorSetDelegated",
    "copyDataProperties",
    "copyRestArgs",
    "arraySpread",
    "apply",
    "exportAll",
    "exponentiationOperator",
    "initRegexNamedGroups",
    "getOriginalNativeErrorConstructor",
} // }}}

// vim: set foldenable:
